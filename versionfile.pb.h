// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: versionfile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_versionfile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_versionfile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_versionfile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_versionfile_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_versionfile_2eproto;
namespace vern {
class verdata;
struct verdataDefaultTypeInternal;
extern verdataDefaultTypeInternal _verdata_default_instance_;
class verfile;
struct verfileDefaultTypeInternal;
extern verfileDefaultTypeInternal _verfile_default_instance_;
}  // namespace vern
PROTOBUF_NAMESPACE_OPEN
template<> ::vern::verdata* Arena::CreateMaybeMessage<::vern::verdata>(Arena*);
template<> ::vern::verfile* Arena::CreateMaybeMessage<::vern::verfile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vern {

// ===================================================================

class verfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vern.verfile) */ {
 public:
  inline verfile() : verfile(nullptr) {}
  ~verfile() override;
  explicit PROTOBUF_CONSTEXPR verfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  verfile(const verfile& from);
  verfile(verfile&& from) noexcept
    : verfile() {
    *this = ::std::move(from);
  }

  inline verfile& operator=(const verfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline verfile& operator=(verfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const verfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const verfile* internal_default_instance() {
    return reinterpret_cast<const verfile*>(
               &_verfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(verfile& a, verfile& b) {
    a.Swap(&b);
  }
  inline void Swap(verfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(verfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  verfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<verfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const verfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const verfile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(verfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vern.verfile";
  }
  protected:
  explicit verfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVertxtFieldNumber = 5,
    kVertimeFieldNumber = 4,
    kVersionFieldNumber = 2,
    kVercountFieldNumber = 3,
  };
  // repeated string vertxt = 5;
  int vertxt_size() const;
  private:
  int _internal_vertxt_size() const;
  public:
  void clear_vertxt();
  const std::string& vertxt(int index) const;
  std::string* mutable_vertxt(int index);
  void set_vertxt(int index, const std::string& value);
  void set_vertxt(int index, std::string&& value);
  void set_vertxt(int index, const char* value);
  void set_vertxt(int index, const char* value, size_t size);
  std::string* add_vertxt();
  void add_vertxt(const std::string& value);
  void add_vertxt(std::string&& value);
  void add_vertxt(const char* value);
  void add_vertxt(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vertxt() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vertxt();
  private:
  const std::string& _internal_vertxt(int index) const;
  std::string* _internal_add_vertxt();
  public:

  // optional string vertime = 4;
  bool has_vertime() const;
  private:
  bool _internal_has_vertime() const;
  public:
  void clear_vertime();
  const std::string& vertime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vertime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vertime();
  PROTOBUF_NODISCARD std::string* release_vertime();
  void set_allocated_vertime(std::string* vertime);
  private:
  const std::string& _internal_vertime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vertime(const std::string& value);
  std::string* _internal_mutable_vertime();
  public:

  // optional int32 version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // optional int32 vercount = 3;
  bool has_vercount() const;
  private:
  bool _internal_has_vercount() const;
  public:
  void clear_vercount();
  int32_t vercount() const;
  void set_vercount(int32_t value);
  private:
  int32_t _internal_vercount() const;
  void _internal_set_vercount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:vern.verfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vertxt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vertime_;
  int32_t version_;
  int32_t vercount_;
  friend struct ::TableStruct_versionfile_2eproto;
};
// -------------------------------------------------------------------

class verdata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vern.verdata) */ {
 public:
  inline verdata() : verdata(nullptr) {}
  ~verdata() override;
  explicit PROTOBUF_CONSTEXPR verdata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  verdata(const verdata& from);
  verdata(verdata&& from) noexcept
    : verdata() {
    *this = ::std::move(from);
  }

  inline verdata& operator=(const verdata& from) {
    CopyFrom(from);
    return *this;
  }
  inline verdata& operator=(verdata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const verdata& default_instance() {
    return *internal_default_instance();
  }
  static inline const verdata* internal_default_instance() {
    return reinterpret_cast<const verdata*>(
               &_verdata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(verdata& a, verdata& b) {
    a.Swap(&b);
  }
  inline void Swap(verdata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(verdata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  verdata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<verdata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const verdata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const verdata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(verdata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vern.verdata";
  }
  protected:
  explicit verdata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerlistFieldNumber = 1,
    kVernameFieldNumber = 3,
    kCurrentversionFieldNumber = 2,
  };
  // repeated .vern.verfile verlist = 1;
  int verlist_size() const;
  private:
  int _internal_verlist_size() const;
  public:
  void clear_verlist();
  ::vern::verfile* mutable_verlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vern::verfile >*
      mutable_verlist();
  private:
  const ::vern::verfile& _internal_verlist(int index) const;
  ::vern::verfile* _internal_add_verlist();
  public:
  const ::vern::verfile& verlist(int index) const;
  ::vern::verfile* add_verlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vern::verfile >&
      verlist() const;

  // optional string vername = 3;
  bool has_vername() const;
  private:
  bool _internal_has_vername() const;
  public:
  void clear_vername();
  const std::string& vername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vername();
  PROTOBUF_NODISCARD std::string* release_vername();
  void set_allocated_vername(std::string* vername);
  private:
  const std::string& _internal_vername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vername(const std::string& value);
  std::string* _internal_mutable_vername();
  public:

  // optional int32 currentversion = 2;
  bool has_currentversion() const;
  private:
  bool _internal_has_currentversion() const;
  public:
  void clear_currentversion();
  int32_t currentversion() const;
  void set_currentversion(int32_t value);
  private:
  int32_t _internal_currentversion() const;
  void _internal_set_currentversion(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:vern.verdata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vern::verfile > verlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vername_;
  int32_t currentversion_;
  friend struct ::TableStruct_versionfile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// verfile

// optional int32 version = 2;
inline bool verfile::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool verfile::has_version() const {
  return _internal_has_version();
}
inline void verfile::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t verfile::_internal_version() const {
  return version_;
}
inline int32_t verfile::version() const {
  // @@protoc_insertion_point(field_get:vern.verfile.version)
  return _internal_version();
}
inline void verfile::_internal_set_version(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void verfile::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:vern.verfile.version)
}

// optional int32 vercount = 3;
inline bool verfile::_internal_has_vercount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool verfile::has_vercount() const {
  return _internal_has_vercount();
}
inline void verfile::clear_vercount() {
  vercount_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t verfile::_internal_vercount() const {
  return vercount_;
}
inline int32_t verfile::vercount() const {
  // @@protoc_insertion_point(field_get:vern.verfile.vercount)
  return _internal_vercount();
}
inline void verfile::_internal_set_vercount(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  vercount_ = value;
}
inline void verfile::set_vercount(int32_t value) {
  _internal_set_vercount(value);
  // @@protoc_insertion_point(field_set:vern.verfile.vercount)
}

// optional string vertime = 4;
inline bool verfile::_internal_has_vertime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool verfile::has_vertime() const {
  return _internal_has_vertime();
}
inline void verfile::clear_vertime() {
  vertime_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& verfile::vertime() const {
  // @@protoc_insertion_point(field_get:vern.verfile.vertime)
  return _internal_vertime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void verfile::set_vertime(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 vertime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vern.verfile.vertime)
}
inline std::string* verfile::mutable_vertime() {
  std::string* _s = _internal_mutable_vertime();
  // @@protoc_insertion_point(field_mutable:vern.verfile.vertime)
  return _s;
}
inline const std::string& verfile::_internal_vertime() const {
  return vertime_.Get();
}
inline void verfile::_internal_set_vertime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  vertime_.Set(value, GetArenaForAllocation());
}
inline std::string* verfile::_internal_mutable_vertime() {
  _has_bits_[0] |= 0x00000001u;
  return vertime_.Mutable(GetArenaForAllocation());
}
inline std::string* verfile::release_vertime() {
  // @@protoc_insertion_point(field_release:vern.verfile.vertime)
  if (!_internal_has_vertime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = vertime_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vertime_.IsDefault()) {
    vertime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void verfile::set_allocated_vertime(std::string* vertime) {
  if (vertime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vertime_.SetAllocated(vertime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vertime_.IsDefault()) {
    vertime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vern.verfile.vertime)
}

// repeated string vertxt = 5;
inline int verfile::_internal_vertxt_size() const {
  return vertxt_.size();
}
inline int verfile::vertxt_size() const {
  return _internal_vertxt_size();
}
inline void verfile::clear_vertxt() {
  vertxt_.Clear();
}
inline std::string* verfile::add_vertxt() {
  std::string* _s = _internal_add_vertxt();
  // @@protoc_insertion_point(field_add_mutable:vern.verfile.vertxt)
  return _s;
}
inline const std::string& verfile::_internal_vertxt(int index) const {
  return vertxt_.Get(index);
}
inline const std::string& verfile::vertxt(int index) const {
  // @@protoc_insertion_point(field_get:vern.verfile.vertxt)
  return _internal_vertxt(index);
}
inline std::string* verfile::mutable_vertxt(int index) {
  // @@protoc_insertion_point(field_mutable:vern.verfile.vertxt)
  return vertxt_.Mutable(index);
}
inline void verfile::set_vertxt(int index, const std::string& value) {
  vertxt_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:vern.verfile.vertxt)
}
inline void verfile::set_vertxt(int index, std::string&& value) {
  vertxt_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:vern.verfile.vertxt)
}
inline void verfile::set_vertxt(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vertxt_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vern.verfile.vertxt)
}
inline void verfile::set_vertxt(int index, const char* value, size_t size) {
  vertxt_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vern.verfile.vertxt)
}
inline std::string* verfile::_internal_add_vertxt() {
  return vertxt_.Add();
}
inline void verfile::add_vertxt(const std::string& value) {
  vertxt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vern.verfile.vertxt)
}
inline void verfile::add_vertxt(std::string&& value) {
  vertxt_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vern.verfile.vertxt)
}
inline void verfile::add_vertxt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vertxt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vern.verfile.vertxt)
}
inline void verfile::add_vertxt(const char* value, size_t size) {
  vertxt_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vern.verfile.vertxt)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
verfile::vertxt() const {
  // @@protoc_insertion_point(field_list:vern.verfile.vertxt)
  return vertxt_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
verfile::mutable_vertxt() {
  // @@protoc_insertion_point(field_mutable_list:vern.verfile.vertxt)
  return &vertxt_;
}

// -------------------------------------------------------------------

// verdata

// repeated .vern.verfile verlist = 1;
inline int verdata::_internal_verlist_size() const {
  return verlist_.size();
}
inline int verdata::verlist_size() const {
  return _internal_verlist_size();
}
inline void verdata::clear_verlist() {
  verlist_.Clear();
}
inline ::vern::verfile* verdata::mutable_verlist(int index) {
  // @@protoc_insertion_point(field_mutable:vern.verdata.verlist)
  return verlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vern::verfile >*
verdata::mutable_verlist() {
  // @@protoc_insertion_point(field_mutable_list:vern.verdata.verlist)
  return &verlist_;
}
inline const ::vern::verfile& verdata::_internal_verlist(int index) const {
  return verlist_.Get(index);
}
inline const ::vern::verfile& verdata::verlist(int index) const {
  // @@protoc_insertion_point(field_get:vern.verdata.verlist)
  return _internal_verlist(index);
}
inline ::vern::verfile* verdata::_internal_add_verlist() {
  return verlist_.Add();
}
inline ::vern::verfile* verdata::add_verlist() {
  ::vern::verfile* _add = _internal_add_verlist();
  // @@protoc_insertion_point(field_add:vern.verdata.verlist)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vern::verfile >&
verdata::verlist() const {
  // @@protoc_insertion_point(field_list:vern.verdata.verlist)
  return verlist_;
}

// optional string vername = 3;
inline bool verdata::_internal_has_vername() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool verdata::has_vername() const {
  return _internal_has_vername();
}
inline void verdata::clear_vername() {
  vername_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& verdata::vername() const {
  // @@protoc_insertion_point(field_get:vern.verdata.vername)
  return _internal_vername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void verdata::set_vername(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 vername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vern.verdata.vername)
}
inline std::string* verdata::mutable_vername() {
  std::string* _s = _internal_mutable_vername();
  // @@protoc_insertion_point(field_mutable:vern.verdata.vername)
  return _s;
}
inline const std::string& verdata::_internal_vername() const {
  return vername_.Get();
}
inline void verdata::_internal_set_vername(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  vername_.Set(value, GetArenaForAllocation());
}
inline std::string* verdata::_internal_mutable_vername() {
  _has_bits_[0] |= 0x00000001u;
  return vername_.Mutable(GetArenaForAllocation());
}
inline std::string* verdata::release_vername() {
  // @@protoc_insertion_point(field_release:vern.verdata.vername)
  if (!_internal_has_vername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = vername_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vername_.IsDefault()) {
    vername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void verdata::set_allocated_vername(std::string* vername) {
  if (vername != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vername_.SetAllocated(vername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vername_.IsDefault()) {
    vername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vern.verdata.vername)
}

// optional int32 currentversion = 2;
inline bool verdata::_internal_has_currentversion() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool verdata::has_currentversion() const {
  return _internal_has_currentversion();
}
inline void verdata::clear_currentversion() {
  currentversion_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t verdata::_internal_currentversion() const {
  return currentversion_;
}
inline int32_t verdata::currentversion() const {
  // @@protoc_insertion_point(field_get:vern.verdata.currentversion)
  return _internal_currentversion();
}
inline void verdata::_internal_set_currentversion(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  currentversion_ = value;
}
inline void verdata::set_currentversion(int32_t value) {
  _internal_set_currentversion(value);
  // @@protoc_insertion_point(field_set:vern.verdata.currentversion)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vern

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_versionfile_2eproto
