// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: textfile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_textfile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_textfile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_textfile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_textfile_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_textfile_2eproto;
namespace projectfile {
class Project;
struct ProjectDefaultTypeInternal;
extern ProjectDefaultTypeInternal _Project_default_instance_;
class prolist;
struct prolistDefaultTypeInternal;
extern prolistDefaultTypeInternal _prolist_default_instance_;
}  // namespace projectfile
PROTOBUF_NAMESPACE_OPEN
template<> ::projectfile::Project* Arena::CreateMaybeMessage<::projectfile::Project>(Arena*);
template<> ::projectfile::prolist* Arena::CreateMaybeMessage<::projectfile::prolist>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace projectfile {

// ===================================================================

class Project final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:projectfile.Project) */ {
 public:
  inline Project() : Project(nullptr) {}
  ~Project() override;
  explicit PROTOBUF_CONSTEXPR Project(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Project(const Project& from);
  Project(Project&& from) noexcept
    : Project() {
    *this = ::std::move(from);
  }

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  inline Project& operator=(Project&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Project& default_instance() {
    return *internal_default_instance();
  }
  static inline const Project* internal_default_instance() {
    return reinterpret_cast<const Project*>(
               &_Project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Project& a, Project& b) {
    a.Swap(&b);
  }
  inline void Swap(Project* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Project* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Project* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Project>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Project& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Project& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Project* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "projectfile.Project";
  }
  protected:
  explicit Project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kCreatefileFieldNumber = 4,
    kCurrversionFieldNumber = 1,
    kProidFieldNumber = 3,
  };
  // optional string fileName = 2;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string createfile = 4;
  bool has_createfile() const;
  private:
  bool _internal_has_createfile() const;
  public:
  void clear_createfile();
  const std::string& createfile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_createfile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_createfile();
  PROTOBUF_NODISCARD std::string* release_createfile();
  void set_allocated_createfile(std::string* createfile);
  private:
  const std::string& _internal_createfile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createfile(const std::string& value);
  std::string* _internal_mutable_createfile();
  public:

  // optional int32 currversion = 1;
  bool has_currversion() const;
  private:
  bool _internal_has_currversion() const;
  public:
  void clear_currversion();
  int32_t currversion() const;
  void set_currversion(int32_t value);
  private:
  int32_t _internal_currversion() const;
  void _internal_set_currversion(int32_t value);
  public:

  // optional int32 proid = 3;
  bool has_proid() const;
  private:
  bool _internal_has_proid() const;
  public:
  void clear_proid();
  int32_t proid() const;
  void set_proid(int32_t value);
  private:
  int32_t _internal_proid() const;
  void _internal_set_proid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:projectfile.Project)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createfile_;
  int32_t currversion_;
  int32_t proid_;
  friend struct ::TableStruct_textfile_2eproto;
};
// -------------------------------------------------------------------

class prolist final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:projectfile.prolist) */ {
 public:
  inline prolist() : prolist(nullptr) {}
  ~prolist() override;
  explicit PROTOBUF_CONSTEXPR prolist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  prolist(const prolist& from);
  prolist(prolist&& from) noexcept
    : prolist() {
    *this = ::std::move(from);
  }

  inline prolist& operator=(const prolist& from) {
    CopyFrom(from);
    return *this;
  }
  inline prolist& operator=(prolist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const prolist& default_instance() {
    return *internal_default_instance();
  }
  static inline const prolist* internal_default_instance() {
    return reinterpret_cast<const prolist*>(
               &_prolist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(prolist& a, prolist& b) {
    a.Swap(&b);
  }
  inline void Swap(prolist* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(prolist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  prolist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<prolist>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const prolist& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const prolist& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(prolist* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "projectfile.prolist";
  }
  protected:
  explicit prolist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectnameFieldNumber = 1,
    kProjectcountFieldNumber = 2,
  };
  // repeated .projectfile.Project projectname = 1;
  int projectname_size() const;
  private:
  int _internal_projectname_size() const;
  public:
  void clear_projectname();
  ::projectfile::Project* mutable_projectname(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::projectfile::Project >*
      mutable_projectname();
  private:
  const ::projectfile::Project& _internal_projectname(int index) const;
  ::projectfile::Project* _internal_add_projectname();
  public:
  const ::projectfile::Project& projectname(int index) const;
  ::projectfile::Project* add_projectname();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::projectfile::Project >&
      projectname() const;

  // optional int32 projectcount = 2;
  bool has_projectcount() const;
  private:
  bool _internal_has_projectcount() const;
  public:
  void clear_projectcount();
  int32_t projectcount() const;
  void set_projectcount(int32_t value);
  private:
  int32_t _internal_projectcount() const;
  void _internal_set_projectcount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:projectfile.prolist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::projectfile::Project > projectname_;
  int32_t projectcount_;
  friend struct ::TableStruct_textfile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Project

// optional int32 currversion = 1;
inline bool Project::_internal_has_currversion() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Project::has_currversion() const {
  return _internal_has_currversion();
}
inline void Project::clear_currversion() {
  currversion_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t Project::_internal_currversion() const {
  return currversion_;
}
inline int32_t Project::currversion() const {
  // @@protoc_insertion_point(field_get:projectfile.Project.currversion)
  return _internal_currversion();
}
inline void Project::_internal_set_currversion(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  currversion_ = value;
}
inline void Project::set_currversion(int32_t value) {
  _internal_set_currversion(value);
  // @@protoc_insertion_point(field_set:projectfile.Project.currversion)
}

// optional int32 proid = 3;
inline bool Project::_internal_has_proid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Project::has_proid() const {
  return _internal_has_proid();
}
inline void Project::clear_proid() {
  proid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t Project::_internal_proid() const {
  return proid_;
}
inline int32_t Project::proid() const {
  // @@protoc_insertion_point(field_get:projectfile.Project.proid)
  return _internal_proid();
}
inline void Project::_internal_set_proid(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  proid_ = value;
}
inline void Project::set_proid(int32_t value) {
  _internal_set_proid(value);
  // @@protoc_insertion_point(field_set:projectfile.Project.proid)
}

// optional string createfile = 4;
inline bool Project::_internal_has_createfile() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Project::has_createfile() const {
  return _internal_has_createfile();
}
inline void Project::clear_createfile() {
  createfile_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Project::createfile() const {
  // @@protoc_insertion_point(field_get:projectfile.Project.createfile)
  return _internal_createfile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_createfile(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 createfile_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:projectfile.Project.createfile)
}
inline std::string* Project::mutable_createfile() {
  std::string* _s = _internal_mutable_createfile();
  // @@protoc_insertion_point(field_mutable:projectfile.Project.createfile)
  return _s;
}
inline const std::string& Project::_internal_createfile() const {
  return createfile_.Get();
}
inline void Project::_internal_set_createfile(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  createfile_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_createfile() {
  _has_bits_[0] |= 0x00000002u;
  return createfile_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_createfile() {
  // @@protoc_insertion_point(field_release:projectfile.Project.createfile)
  if (!_internal_has_createfile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = createfile_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (createfile_.IsDefault()) {
    createfile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Project::set_allocated_createfile(std::string* createfile) {
  if (createfile != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  createfile_.SetAllocated(createfile, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (createfile_.IsDefault()) {
    createfile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:projectfile.Project.createfile)
}

// optional string fileName = 2;
inline bool Project::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Project::has_filename() const {
  return _internal_has_filename();
}
inline void Project::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Project::filename() const {
  // @@protoc_insertion_point(field_get:projectfile.Project.fileName)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:projectfile.Project.fileName)
}
inline std::string* Project::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:projectfile.Project.fileName)
  return _s;
}
inline const std::string& Project::_internal_filename() const {
  return filename_.Get();
}
inline void Project::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_filename() {
  // @@protoc_insertion_point(field_release:projectfile.Project.fileName)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = filename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault()) {
    filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Project::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault()) {
    filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:projectfile.Project.fileName)
}

// -------------------------------------------------------------------

// prolist

// repeated .projectfile.Project projectname = 1;
inline int prolist::_internal_projectname_size() const {
  return projectname_.size();
}
inline int prolist::projectname_size() const {
  return _internal_projectname_size();
}
inline void prolist::clear_projectname() {
  projectname_.Clear();
}
inline ::projectfile::Project* prolist::mutable_projectname(int index) {
  // @@protoc_insertion_point(field_mutable:projectfile.prolist.projectname)
  return projectname_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::projectfile::Project >*
prolist::mutable_projectname() {
  // @@protoc_insertion_point(field_mutable_list:projectfile.prolist.projectname)
  return &projectname_;
}
inline const ::projectfile::Project& prolist::_internal_projectname(int index) const {
  return projectname_.Get(index);
}
inline const ::projectfile::Project& prolist::projectname(int index) const {
  // @@protoc_insertion_point(field_get:projectfile.prolist.projectname)
  return _internal_projectname(index);
}
inline ::projectfile::Project* prolist::_internal_add_projectname() {
  return projectname_.Add();
}
inline ::projectfile::Project* prolist::add_projectname() {
  ::projectfile::Project* _add = _internal_add_projectname();
  // @@protoc_insertion_point(field_add:projectfile.prolist.projectname)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::projectfile::Project >&
prolist::projectname() const {
  // @@protoc_insertion_point(field_list:projectfile.prolist.projectname)
  return projectname_;
}

// optional int32 projectcount = 2;
inline bool prolist::_internal_has_projectcount() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool prolist::has_projectcount() const {
  return _internal_has_projectcount();
}
inline void prolist::clear_projectcount() {
  projectcount_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t prolist::_internal_projectcount() const {
  return projectcount_;
}
inline int32_t prolist::projectcount() const {
  // @@protoc_insertion_point(field_get:projectfile.prolist.projectcount)
  return _internal_projectcount();
}
inline void prolist::_internal_set_projectcount(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  projectcount_ = value;
}
inline void prolist::set_projectcount(int32_t value) {
  _internal_set_projectcount(value);
  // @@protoc_insertion_point(field_set:projectfile.prolist.projectcount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace projectfile

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_textfile_2eproto
