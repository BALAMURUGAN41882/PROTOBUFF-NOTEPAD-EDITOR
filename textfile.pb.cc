// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: textfile.proto

#include "textfile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace projectfile {
PROTOBUF_CONSTEXPR Project::Project(
    ::_pbi::ConstantInitialized)
  : filename_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , createfile_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , currversion_(0)
  , proid_(0){}
struct ProjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProjectDefaultTypeInternal() {}
  union {
    Project _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProjectDefaultTypeInternal _Project_default_instance_;
PROTOBUF_CONSTEXPR prolist::prolist(
    ::_pbi::ConstantInitialized)
  : projectname_()
  , projectcount_(0){}
struct prolistDefaultTypeInternal {
  PROTOBUF_CONSTEXPR prolistDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~prolistDefaultTypeInternal() {}
  union {
    prolist _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 prolistDefaultTypeInternal _prolist_default_instance_;
}  // namespace projectfile
static ::_pb::Metadata file_level_metadata_textfile_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_textfile_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_textfile_2eproto = nullptr;

const uint32_t TableStruct_textfile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::projectfile::Project, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::projectfile::Project, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::projectfile::Project, currversion_),
  PROTOBUF_FIELD_OFFSET(::projectfile::Project, proid_),
  PROTOBUF_FIELD_OFFSET(::projectfile::Project, createfile_),
  PROTOBUF_FIELD_OFFSET(::projectfile::Project, filename_),
  2,
  3,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::projectfile::prolist, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::projectfile::prolist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::projectfile::prolist, projectname_),
  PROTOBUF_FIELD_OFFSET(::projectfile::prolist, projectcount_),
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::projectfile::Project)},
  { 14, 22, -1, sizeof(::projectfile::prolist)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::projectfile::_Project_default_instance_._instance,
  &::projectfile::_prolist_default_instance_._instance,
};

const char descriptor_table_protodef_textfile_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016textfile.proto\022\013projectfile\"\235\001\n\007Projec"
  "t\022\030\n\013currversion\030\001 \001(\005H\000\210\001\001\022\022\n\005proid\030\003 \001"
  "(\005H\001\210\001\001\022\027\n\ncreatefile\030\004 \001(\tH\002\210\001\001\022\025\n\010file"
  "Name\030\002 \001(\tH\003\210\001\001B\016\n\014_currversionB\010\n\006_proi"
  "dB\r\n\013_createfileB\013\n\t_fileName\"`\n\007prolist"
  "\022)\n\013projectname\030\001 \003(\0132\024.projectfile.Proj"
  "ect\022\031\n\014projectcount\030\002 \001(\005H\000\210\001\001B\017\n\r_proje"
  "ctcountb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_textfile_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_textfile_2eproto = {
    false, false, 295, descriptor_table_protodef_textfile_2eproto,
    "textfile.proto",
    &descriptor_table_textfile_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_textfile_2eproto::offsets,
    file_level_metadata_textfile_2eproto, file_level_enum_descriptors_textfile_2eproto,
    file_level_service_descriptors_textfile_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_textfile_2eproto_getter() {
  return &descriptor_table_textfile_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_textfile_2eproto(&descriptor_table_textfile_2eproto);
namespace projectfile {

// ===================================================================

class Project::_Internal {
 public:
  using HasBits = decltype(std::declval<Project>()._has_bits_);
  static void set_has_currversion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_proid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_createfile(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Project::Project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:projectfile.Project)
}
Project::Project(const Project& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(from._internal_filename(), 
      GetArenaForAllocation());
  }
  createfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    createfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_createfile()) {
    createfile_.Set(from._internal_createfile(), 
      GetArenaForAllocation());
  }
  ::memcpy(&currversion_, &from.currversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&proid_) -
    reinterpret_cast<char*>(&currversion_)) + sizeof(proid_));
  // @@protoc_insertion_point(copy_constructor:projectfile.Project)
}

inline void Project::SharedCtor() {
filename_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
createfile_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  createfile_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&currversion_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&proid_) -
    reinterpret_cast<char*>(&currversion_)) + sizeof(proid_));
}

Project::~Project() {
  // @@protoc_insertion_point(destructor:projectfile.Project)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Project::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.Destroy();
  createfile_.Destroy();
}

void Project::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Project::Clear() {
// @@protoc_insertion_point(message_clear_start:projectfile.Project)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      createfile_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&currversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&proid_) -
        reinterpret_cast<char*>(&currversion_)) + sizeof(proid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Project::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 currversion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_currversion(&has_bits);
          currversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string fileName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "projectfile.Project.fileName"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 proid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_proid(&has_bits);
          proid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string createfile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_createfile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "projectfile.Project.createfile"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Project::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:projectfile.Project)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 currversion = 1;
  if (_internal_has_currversion()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_currversion(), target);
  }

  // optional string fileName = 2;
  if (_internal_has_filename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "projectfile.Project.fileName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filename(), target);
  }

  // optional int32 proid = 3;
  if (_internal_has_proid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_proid(), target);
  }

  // optional string createfile = 4;
  if (_internal_has_createfile()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createfile().data(), static_cast<int>(this->_internal_createfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "projectfile.Project.createfile");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_createfile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:projectfile.Project)
  return target;
}

size_t Project::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:projectfile.Project)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string fileName = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional string createfile = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_createfile());
    }

    // optional int32 currversion = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currversion());
    }

    // optional int32 proid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_proid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Project::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Project::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Project::GetClassData() const { return &_class_data_; }

void Project::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Project *>(to)->MergeFrom(
      static_cast<const Project &>(from));
}


void Project::MergeFrom(const Project& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:projectfile.Project)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_createfile(from._internal_createfile());
    }
    if (cached_has_bits & 0x00000004u) {
      currversion_ = from.currversion_;
    }
    if (cached_has_bits & 0x00000008u) {
      proid_ = from.proid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Project::CopyFrom(const Project& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:projectfile.Project)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Project::IsInitialized() const {
  return true;
}

void Project::InternalSwap(Project* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &createfile_, lhs_arena,
      &other->createfile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Project, proid_)
      + sizeof(Project::proid_)
      - PROTOBUF_FIELD_OFFSET(Project, currversion_)>(
          reinterpret_cast<char*>(&currversion_),
          reinterpret_cast<char*>(&other->currversion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Project::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_textfile_2eproto_getter, &descriptor_table_textfile_2eproto_once,
      file_level_metadata_textfile_2eproto[0]);
}

// ===================================================================

class prolist::_Internal {
 public:
  using HasBits = decltype(std::declval<prolist>()._has_bits_);
  static void set_has_projectcount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

prolist::prolist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  projectname_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:projectfile.prolist)
}
prolist::prolist(const prolist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      projectname_(from.projectname_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  projectcount_ = from.projectcount_;
  // @@protoc_insertion_point(copy_constructor:projectfile.prolist)
}

inline void prolist::SharedCtor() {
projectcount_ = 0;
}

prolist::~prolist() {
  // @@protoc_insertion_point(destructor:projectfile.prolist)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void prolist::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void prolist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void prolist::Clear() {
// @@protoc_insertion_point(message_clear_start:projectfile.prolist)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  projectname_.Clear();
  projectcount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* prolist::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .projectfile.Project projectname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_projectname(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 projectcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_projectcount(&has_bits);
          projectcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* prolist::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:projectfile.prolist)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .projectfile.Project projectname = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_projectname_size()); i < n; i++) {
    const auto& repfield = this->_internal_projectname(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 projectcount = 2;
  if (_internal_has_projectcount()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_projectcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:projectfile.prolist)
  return target;
}

size_t prolist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:projectfile.prolist)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .projectfile.Project projectname = 1;
  total_size += 1UL * this->_internal_projectname_size();
  for (const auto& msg : this->projectname_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 projectcount = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_projectcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData prolist::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    prolist::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*prolist::GetClassData() const { return &_class_data_; }

void prolist::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<prolist *>(to)->MergeFrom(
      static_cast<const prolist &>(from));
}


void prolist::MergeFrom(const prolist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:projectfile.prolist)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  projectname_.MergeFrom(from.projectname_);
  if (from._internal_has_projectcount()) {
    _internal_set_projectcount(from._internal_projectcount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void prolist::CopyFrom(const prolist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:projectfile.prolist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool prolist::IsInitialized() const {
  return true;
}

void prolist::InternalSwap(prolist* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  projectname_.InternalSwap(&other->projectname_);
  swap(projectcount_, other->projectcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata prolist::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_textfile_2eproto_getter, &descriptor_table_textfile_2eproto_once,
      file_level_metadata_textfile_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace projectfile
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::projectfile::Project*
Arena::CreateMaybeMessage< ::projectfile::Project >(Arena* arena) {
  return Arena::CreateMessageInternal< ::projectfile::Project >(arena);
}
template<> PROTOBUF_NOINLINE ::projectfile::prolist*
Arena::CreateMaybeMessage< ::projectfile::prolist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::projectfile::prolist >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
